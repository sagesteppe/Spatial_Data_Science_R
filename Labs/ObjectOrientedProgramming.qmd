---
title: "ObjectedOrientedProgramming"
subtitle: "R for Data Science"
author: "Reed Benkendorf"
date: "2022-February-06"
date-format: long
format: 
  revealjs:
    theme: black
    highlight: pygments
    preview-links: auto
    logo: ../pictures/CBG_Logos/NegauneeInstitute_CBG-Logo-FlowerMark.png
    chalkboard: 
      boardmarker-width: 5
    reveal_options:
      width: 1920
      height: 1080
      fontsize: 22pt
css: custom.css
editor: 
  markdown: 
    wrap: 72
include-in-header:
  - text: |
      <style>
      #title-slide .title {
        font-size: 1.5em;
      }
      #image tags .center {
        text-align: center;
        font-size: 4em;
        font-color: cbc4c3;
      }
      </style>
---

\tableofcontents 

Assigned Reading: Advanced R chapters 12 - 16

# Methods 

## Libraries

```{r Load Libraries, message = F, warning = F, echo = F}

shhh <- suppressPackageStartupMessages 

shhh(library(sp))
shhh(library(sf))
shhh(library(raster))
shhh(library(tidyverse))
shhh(library(terra))
shhh(library(sloop)) # for objects

rm(shhh)
```

```{r import Vector Data, echo = F, warning = F, message = F}
# getwd()
path <- './spatial_lecture_data/sentinel_imagery'
files.shp <- list.files(path, ".shp")

dec_lakes_v <- read_sf(paste0(path,"/",files.shp), quiet = T) %>% 
  mutate(Data_source = 'Sentinel2') %>% 
  mutate(Processing = 'DL from Earth Explorer, manually georeferenced, and mapped') %>% 
  mutate(Date = as.POSIXct('2021/12/05', '%Y/%m/%d', tz = "US/Pacific-New"))

st_precision(dec_lakes_v) <- 50 # note I am saying each of the points I drew were within 50 meters of the true location. This is not important but I populate for an example below. We are in meters because we are in UTM. 

rm(files.shp)
```

```{r import Raster data, echo = F, warning = F, message = F}

files.tif <- list.files(path, ".tif")
dec_lakes_r <- raster(paste0(path,"/",files.tif[1]), )
oct_lakes_r <- raster(paste0(path,"/",files.tif[3]))

rm(files.tif, path)
```

```{r Quickly Reclassify Rasters for an example, echo = F}
reclass_first <- matrix(
  c(0, 1, NA,
    1 ,50, 0,
  50, 250, 1),
        nrow = 3, 
        ncol = 3,
       byrow = T) 

dec_lakes_r_classified_c <- reclassify(dec_lakes_r, reclass_first)
oct_lakes_r_classified_c <- reclassify(oct_lakes_r, reclass_first)

dec_lakes_r_classified_f <- aggregate(dec_lakes_r_classified_c, 7.0)
oct_lakes_r_classified_f <- aggregate(oct_lakes_r_classified_c, 7.0)

reclass_second <- matrix(
  c(0, 0.5, 0,
    0.5, 1, 1),
        nrow = 2, 
        ncol = 3,
       byrow = T)

dec_lakes_r_classified_f <- reclassify(dec_lakes_r_classified_f, reclass_second)
oct_lakes_r_classified_f <- reclassify(oct_lakes_r_classified_f, reclass_second)

rm(reclass_first, reclass_second, dec_lakes_r_classified_c, oct_lakes_r_classified_c, oct_lakes_r)

```

```{r Create Empty Raster and Populate, echo = F, comment = ""}

ext_rast <- st_bbox(dec_lakes_r)
grid <- st_make_grid(ext_rast,  # create a fishnet to emulate the idea of an empty raster ! :-)
  n = c(118, 118),
  what = "polygons",
  square = TRUE,
  flat_topped = FALSE)
# st_write(grid, 'Example_HoneyLake_Grid.shp')

empty_raster <- raster(
  # A raster is composed of four perpendicular lines.
  # Here we define each 'edge' of the raster'
                         xmn = 697129.7, 
                         xmx = 811775.7, 
                         ymn = 4388466,
                         ymx = 4502382,
                         
                         nrows = 118, # we are creating 100 cells.  
                         ncols = 118, # We can calculate the resolution of these below.
                         
                         crs = "+proj=utm +zone=10 +datum=WGS84", 
                         # set the rasters Coordinate Reference System
                         )

rast_vals_num <- as.integer(as.vector(as.numeric(dec_lakes_r_classified_f@data@values)))

raster_matrix <- matrix(rast_vals_num, # fill matrix with values, 
                       nrow = empty_raster@nrows, # create matrix same dimensions as raster
                       ncol = empty_raster@ncols, # create matrix same dimensions as raster
                       byrow = T) #ensure filling of matrix goes from upper left to lower right.

example_raster_dec <- setValues(empty_raster, raster_matrix)
example_raster_oct <- setValues(empty_raster, oct_lakes_r_classified_f@data@values )

fake_data <- matrix(c(0,1,1,0,1,0),
                    nrow = 6,
                    ncol = 8,
                    byrow=T)

rm(fake_data, ext_rast, grid)
```

```{r The size of Raster Components, message = F, warning = F, comment = "", out.width = "85%", fig.align="center", echo = F}

rast_vals_char <- as.vector(as.character(dec_lakes_r_classified_f@data@values))
rast_vals_char <- ifelse(rast_vals_char == 0, 'Water', 'Terrestrial')

raster_dataframe <- as.data.frame(raster_matrix)
colnames(raster_dataframe) <- c(1:ncol(raster_dataframe))
```

# Obect Orientated Programming in R

"Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods)." - from Wikipedia

To date we have largely focused on functional programming. That changes now.

```{r Object types - Create Types, echo = F, warning = F, message = F}
dec_lakes_sf <- dec_lakes_v
dec_lakes_sp <- as(dec_lakes_v, 'Spatial')
dates_of_imaging <- dec_lakes_sf$Date
rm(dec_lakes_v)
```

R uses upwards of 25 types of objects. Many of these are highly specialized and we will not go into them, however it is necessary to elaborate on some of the differences between them. To date we have largely been using what may be called 'base' objects, i.e. objects which lack a 'class'. A class contains attributes which define certain parameters of the object, note that each attribute is based off of a 'base' object at some point.

## 10.1 Base Objects Reviewed

Some of the most common base objects are vectors, matrices, and lists.

```{r Object Types 1 make a vector, comment = ""}
rast_vals_char[1:3]
```

```{r Object Types 2 evaluate a vector, echo = F, comment=""}
writeLines(paste0('The first element of this vector is: ', rast_vals_char[1]))
writeLines(paste0('A vector is an object of type: ', otype(rast_vals_char)))
writeLines(paste0('This vector objects inhereits of class: ', s3_class(rast_vals_char)))
```

if we use the function 'otype' from the sloop package we can see that this object is a 'base' object and is in a class defined as character

```{r Object Types 3 make a matrix, comment = ""}
raster_matrix <- matrix(c(1,0,1,
                          0,1,1,
                          1,0,0), 
                        ncol = 3)
```

```{r Object Types 5 evaluate a matrix, echo = F, comment=""}
knitr::kable(raster_matrix[1:3,1:3])
writeLines(paste0('A matrix is an object of type: ', otype(raster_matrix)))
writeLines(paste0('A matrix inherits classes of: ', s3_class(raster_matrix)))
```


```{r Object Types 6 make list, echo = F, comment = ""}
raster_pieces_list <- list(Vector = rast_vals_char[1:3], 
                           Matrix = raster_matrix[1:3,1:3], 
                           Dataframe = raster_dataframe[1:3,1:3])
```

```{r Object Types 7 evaluate a list, echo = F, comment = ""}
writeLines(s3_class(raster_pieces_list))
writeLines('I made a list out of the last 2 objects and a dataframe:')
raster_pieces_list
writeLines(paste0('A list is an object of type: ', otype(raster_pieces_list)))
rm(raster_pieces_list, rast_vals_char, raster_matrix)
```

These base objects are more of less capable of just *storing* values. I.e. In a sense we can put whatever we want into a vector and it will work out - if we have mixed data types theywill be coerced to characters,  *but* we can do it.

```{r Object Types 8 Junk Vector, comment = ""}
junk <- c(1, 'A', 'alpahbet soup', '$')
print(junk)
```

```{r Object Types 9 clean junk, echo = F}
rm(junk)
```

## 'Introduction' to S3 Objects

```{r Object Types POSIXct 1, echo = F, comment = "", warning = F, message = F}
writeLines(paste0('This is an example of a POSIXct time: ', dates_of_imaging[1], ', to me it just looks like a character vector'))
```
Let's take a look at our vector of POSIXct time zones, which superficially to me (an human) look like numbers separated by dashes. 

```{r Object Types POSIXct 2, echo = F, comment = "", warning = F, message = F}
attributes(dates_of_imaging)
```

We see that two attributes are stored in that object. The first is the timezone, which is defined elsewhere in R (and I believe is inherited by R from other systems), but is notated within this object. Critically, We also have the formal 'class' definition of a POSIXct format.

```{r Object Types POSIXct 3, echo = F, comment = "", warning = F, message = F}
writeLines(paste0("The amount of seconds since 1970 and ", dates_of_imaging[1], " is: ", as.numeric(dates_of_imaging[1])))
```

POSIXct dates are all actually treated in R as the amount of seconds between an arbitrary date e.g. January 1st 1970, and the date of observation; so R is really keeping dates in a numeric format - but is hiding this from us! And converting the values into a more human friendly format more or less for display purposes only.

This is a new level of functionality that we have not directly considered yet this quarter. As mentioned we have used objects much like book pages. Now we see that certain objects, are able to refer to themselves to perform, for example, calculations and conversions.

```{r Object Types POSIXct 4, echo = F, comment = ""}
writeLines(paste0('A POSIXct is an object of type: ', otype(dates_of_imaging)))
rm(dates_of_imaging)
```

Objects with the capability to store values in fields, and perform procedures upon themselves form the basis of Object Orientated Programming. In R we have two main OOP classes, S3 and S4. In general objects of both of these classes are *'large'*, however this is not always the case. 

Another S3 object which superficially looks like a vector is an 'Units' object.

When we define a units object, we can simply supply a number for value, and a unit of measurement. 
```{r Object Types Units 1, comment = ""}
fifty_meters <- units::set_units(50, meter)
print(fifty_meters)
```

These objects are capable of performing procedures on themselves, such as converting between meters and yards.
```{r Object Types Units 2, comment = ""}
units(fifty_meters) <- units::make_units(yards)
print(fifty_meters)
```

```{r Object Types Units 3, echo = F, comment = ""}
writeLines(paste0('A Units is an object of type: ', otype(fifty_meters)))
writeLines(paste0('It is its own units class: ', s3_class(fifty_meters)))
attributes(fifty_meters)

rm(fifty_meters)
```

```{r Object Types 1 - Data Frame, echo = F, comment = ""}
raster_dataframe <- raster_dataframe[1:10, 1:10]
colnames(raster_dataframe) <- sample(letters[1:11], size = ncol(raster_dataframe))
rownames(raster_dataframe) <- sample(LETTERS[14:26], size = nrow(raster_dataframe))
```

A more shocking S3 object is the data frame

```{r Object Types 2 - Data Frame, echo = F, comment = ""}
writeLines(otype(raster_dataframe))
attributes(raster_dataframe)

rm(raster_dataframe)
```

We see that of the non-base objects, the most common object is S3. Actually, surprise surprise the amazing data frame has been hiding out as an S3 object this whole time! You may have actually seen an error message indicating this at some point...  So if we look at the attributes of a data frame we see that we have both row and columns names, and we also have a formal definition of the class being a data frame, which in part consists of code demanding that our data frame be rectangular in nature. 

Finally we turn our attention to one slightly more complex S3 object.

### Simple Features

The incredibly popular Simple Features 'SF' package actually stores all it's features in S3 object. Given that a data frame is an S3 object, this is a necessity - but there are some big jumps under the hood. I bet, even more so than these objects being 'accessible' via tidyverse syntax the simplicity of the S3 object compared to S4 sp objects is what spurred there popularity

```{r Object Types - Tibble Simple Feature 1, echo = F, comment = ""}
writeLines(paste0('A simple feature is an object of type: ', otype(dec_lakes_sf)))
```

What is really neat about tibbles, and I am not sure if you all recall is that while they just look like a data frame they are capable of holding a list in a column, hence a 'list column'.

```{r Object Types - Tibble Simple Feature 2, echo = F, comment = ""}
knitr::kable(head(iris))
```

For example we can take the four columns of the Iris dataset which contain the measurement variables, and reduce them to two thematic list columns using the 'nest' function. 

```{r Object Types - Tibble Simple Feature 3, comment = ""}
iris <- iris %>% 
  nest(petal = starts_with("Petal"), 
       sepal = starts_with("Sepal")
       ) 

iris 
# Check the first row of the second column
head(iris[[2]][[1]]) 
# see the structure of the first row of the petal column
str(iris$petal[[1]])

```

If we take a close look at the first for of the second column, that for *I. setosa*, we see all of the short and narrow petal measurements we are familiar with for this species. 

In this example we see that each element in 'petal' contains a list of its own, each of which has a data frame with a column storing *both* the Petal Length and Petal Width values. Each row of each list column (petal & sepal) we see in this tibble is like this.


So what the developers of SF did is to create an S3 object which can hold all of the spatial information in a list column - without you really realizing this information is there. 

```{r Object Types - Tibble Simple Feature 4, echo = F, comment = ""}
print(s3_class(dec_lakes_sf))
knitr::kable(head(dec_lakes_sf[,c(2:3,6)]))
attributes(dec_lakes_sf$geometry)

rm(iris, dec_lakes_sf)
```

This is output is understandably a little much, but these are *all* of the attributes of a Simple Feature Collection which is hidden in the geometry column of a simple feature. Clever right?

## Introduction to S4 Objects

Now S3 objects, are somewhat lax. However there is an S4 object which is a little bit more complex.

Examples of S4 objects include the lovely Raster, and Spatial*(e.g. Points, Polygons, Dataframes...) objects. I find that lists, and S4 objects terrify virtually all of our students each year. Myself included, and in fact I am still slightly spooked by them. While I cannot teach you all how exactly to deal with them, I can teach you all of use them day to day. 

S4 objects are not lax, they are the stricter implementation of S3 objects. The classes which compose S4 objects are incredibly well defined, and they are designed for very specific use cases. This may at times make them obnoxious to work with, when you need to build or modify values in them, but thye are worth the pain. 

```{r Object Types - SpatialPolygonsDataFrame 1, comment = ""}
writeLines(otype(dec_lakes_sp))
writeLines(s3_class(dec_lakes_sp))
```

### Spatial* Objects

Just like as in S3 objects in S4 objects the classes follow certain schema. Note we use a SpatialPolygonsDataFrame as our example here.

In addition to their more strict definitions of classes, S4 objects have another feature which S3 objects lack - Slots. Slots superficially resemble lists in the viewer of RStudio, i.e. they have nested components, but are really their own distinct entities. A SpatialPolygonsDataFrame contains 4 slots, each of these contains a type of data. Note that each slot is accessed using an '@' (still pronounced: 'at') symbol. 

```{r  Object Types - SpatialPolygonsDataFrame 2, comment = ""}
dec_lakes_sp@plotOrder
otype(dec_lakes_sp@plotOrder)
writeLines(s3_class(dec_lakes_sp@plotOrder))
```

Here we access the contents of a slot named 'plotOrder'. We see that this slot simply contains an integer vector. What this vector specifies is the order in which the polygons in this object should be plotted if and when used for making maps. While this information is stored simply as an object of the class 'base', other parts of the SpatialPolygonsDataFrame know how to perform operations with this information.

```{r  Object Types - SpatialPolygonsDataFrame 3, comment = ""}
head(dec_lakes_sp@data)[,c(1:3,5)]
```

We can see that the 'DataFrame' portion of the SpatialPolygonsDataFrame has actually been relegated to it's own slot as well.

```{r Object Types - SpatialPolygonsDataFrame 4, comment = ""}
attributes(dec_lakes_sp@data)
otype(dec_lakes_sp@data)
writeLines(s3_class(dec_lakes_sp@data))
```

While the two slots above, @plotOrder & @data, contain relatively simple objects (base and S3 respectively). The remaining two slots, which are both S4 classes contain all of the spatial information. 

```{r Object Types - SpatialPolygonsDataFrame 5, echo = F, comment = ""}
writeLines(s3_class(dec_lakes_sp@proj4string))
otype(dec_lakes_sp@proj4string)
attributes(dec_lakes_sp@proj4string)
```

The first of the S4 slots is the proj4string (Proj is an awesome open source library for performing conversions between projections), which contains a class "CRS" which defines the Coordinate Reference System of this SpatialPolygonsDataFrame. Hence any time you modify the CRS of a SPDF, you are interacting with this slot.

The final, and most complex of the two S4 slots in a SpatialPolygonsDataFrame is the Polygons slot. This is where the coordintaes, and topological information, fo every single polygon is stored. 
```{r Object Types - SpatialPolygonsDataFrame 6, echo = F, comment = ""}
writeLines(otype(dec_lakes_sp@polygons[[9]]))
attributes(dec_lakes_sp@polygons[[9]]) #  S4 object in this slot, contains all coordinates.

rm(dec_lakes_sp)
```

Here we are looking at the smallest of the polygons in our SPDF (see the plotOrder?). These data are replicated appropriately for each of the other polygons in this object. 

While this S3 object is more complex, we can see how the components held in multiple slots are able to work together to perform operations using the data held in disparate fields throughout the object.

### Raster Objects

Finally we have the Raster Layer which is a rather large and complex S4 unit, composed of 12 main S4 slots... Each of these then having from 1 to 13 slots (these second slots quite small, and not uncommonly consisting of a single value). 

```{r Object Types Raster Layer 1, echo = F, comment = ""}
str(example_raster_dec)
```

Raster Layers are large enough that we unfortunately cannot go into it much during class, but I do encourage the curious you to investigate it on your own. Do keep in mind that it has a slot of 'CRS' which we just saw in our SP object, and it also has a slot of 'extent' which we defined ourselves earlier. 

```{r Object Types Raster Layer 2, echo = F, comment = ""}
writeLines(paste0('Class: ', otype(example_raster_dec)))
writeLines(paste0('Class type: ', s3_class(example_raster_dec)))

writeLines(s3_class(example_raster_dec@data))
# attributes(example_raster_dec@data)
writeLines(s3_class(example_raster_dec@data@values))
```

If we look at our data slot we see that we have an 'integer numeric' type - which is typically how a raster is loaded. I will concede up to this point I said to think about a raster as matrix, but we see ours is actually loaded with an integer. Remember that in R both matrices and data frames are vectors. Remember a main difference between a vector and a matrix, is that a matrix has dimensions, i.e. it knows how many values need to be in each row. While these data are not explicit here, they can be found in another slot. 

```{r Object Types - Clean Environment, echo = F}
rm(rast_vals_num, example_raster_dec)
```

# Object Orientated Programming Bonus: Make our own S3 and s4 objects.

So we approached S3 and S4 objects from a very top down approach there, we looked at those constructed by others. But we can also create our own objects, so we can look at these from the bottom up. 

## Create a simple S3 object

Maybe none of you have noticed yet but you will oon enough; your TA has some traits in common with say Luna Lovegood, and finds it hard to make it to meetings and things. Here we makes a course object which he can save into his R environment so he can just click on it to remind him when he is suppose to show up for class. 

```{r Create an S3 object 1, message = F, warning = F, comment = ""}

course <- list(
  name = c("Lecture", "Lecture", "Laboratory", "Laboratory"),
  wing = c('L', 'L','M','L'),
  room = c(170, 170, 166, 62),
  day  = c('T', 'TH', 'F', 'F'),
  time = c('3:30-4:50', '3:30-4:50', '12:00-12:50', '2:00-3:50')
)

writeLines(sloop::s3_class(course)) # we have only made a list so far 
writeLines(sloop::otype(course))

class(course) <- "Class_times" # by setting a class attribute we have 
# created an S3 object

writeLines(sloop::s3_class(course))
sloop::otype(course)

rm(course)
```
We see that the above object is honestly, just a list that we arbitrarily made an S3 object. That is more or less what it takes to become an S3 object, us just saying hey 'this is a class' !

But we can do things with S3 objects which make them useful to construct. For example, we can add quality assurance checks to our objects.

## Create a more complex S3 object

Your TA made a very poor first list of places he had to be for class, and ended up wandering around tech lost for an hour. He decided to make a slightly more robust Sw object so this did not happen again.

```{r  Create an S3 object 2, warning = F, comment = ""}
course <- function(n, w, r, d, t){
  
  values <- list(name = n, 
                 wing = w, 
                 room = r, 
                 day = d, 
                 time = t)
    
  '%notin%' <- Negate('%in%')
  type <- c('Lecture', 'Laboratory', 'Seminar')
  tech_letters <- LETTERS[1:13]
  days <- c('M', 'T', 'W', 'TH', 'F', 'S', 'SU')
  
  if(any(w %notin% tech_letters)) stop("This wing is not valid")
  if(any(d %notin% days)) stop("This day is not valid")
  if(any(n %notin% type)) stop("This course type is not valid")
  
  attr(values, "class") <- "Course"
  return(values)
  
}
```

```{r  Create an S3 object 3, warning = F, comment = ""}
course_success <- course(c("Lecture", "Lecture", "Laboratory", "Laboratory"),  
                         c('L', 'L','M','L'),
                         c(170,170,166,62), 
                         c('T','TH','F','F'), 
                         c('3:30-4:50','3:30-4:50', '12:00-12:50', '2:00-3:50')
                         )
```

Here we see that an object of the S3 class can be much more than merely a collection of attributes. An S3 object can perform quality assurance steps to ensure the data comply to certain types, and that values are in appropriate units etc. 

If the data are these thoroughly defined, we then see this opens the opportunity for an S3 object to act upon other parts of itself. While in the example above we put in values which match the acceptable criteria of the class we have defined, in the example below will violate the standards of our S3 Object.  

```{r Create an S3 object 4, warning = F, eval = F}
course_fail <- course("Lecture",  
            'Z', # THIS IS NOT DEFINED
            213, 'TH', '2:00-3:50')
```

simulated output (R does not like errors, intentional or not):

"Error in course("Lecture", "Z", 213, "TH", "2:00-3:50") : This wing is not valid"

In the above example, if you input the wrong Wing in Tech, or the wrong day of week abbreviation, this class will angrily let you know and refuse to take your input. I assume this error can be relegated to a warning - but we will not get into those aspects of coding in this class. 

One, possible, draw back of an s3 object is that it is relatively lax. 

```{r Create an S3 object 5, warning = F, echo = F}
rm(course, course_success, course_fail)
```

## Create a simple S4 object

The s4 object is not lax. Here we define the data type which each of these slots will accept. If the value you try to put in does not match, the object will not be created.
```{r Create an S4 object, message = F, warning = F, comment = ""}
setClass("Office_Hours", 
         slots=
           list(
            Instructor="character",
            Wing= "character",
            Number="numeric",
            Days="character",
            Time="numeric",
            Smartroom="logical",
            Windows="logical"
            )
         )
```

- Seven slot object, each slot with a specified data type. 
- Will only input to each column of the correct data type.

```{r Populate an S4 object, message = F, warning = F, comment = ""}
s4_ob_office_hours <- new("Office_Hours", 
  Instructor = c('Benkendorf','Scholl','Benkendorf','Scholl'),
  Wing = c('F', 'F', 'G', 'B'),
  Number = c(380, 380, 278, 138),
  Days = c("M", "W", 'T', 'F'),
  Time = c(8, 11, 9, 3),
  Smartroom = c(TRUE, F, T, F),
  Windows = c(FALSE, T, T, F)
)
```

In it's simplest form an s4 object may be constructed via the setClass function. While this object is able to regulate the data types which are entered to each column, it cannot do much more. 

## Create a more complex S4 object

An S4 object can have validity functions, which basically ensures the data you put into it is appropriate. 
```{r Create a more complex S4 object, message = F, warning = F, comment = ""}

office_hrs <- setClass("Office_Hours", 
         
         slots=c(
           Instructor="character",
           Wing= "character",
           Number="numeric",
           Days="character",
           Time="numeric",
           Smartroom="logical",
           Windows="logical"
           ),
         
        validity=function(object){
          
            '%notin%' <- Negate('%in%')
            tech_letters <- LETTERS[14:26]
            days <- c('M', 'T', 'W', 'TH', 'F', 'S', 'SU')
            instructors <- c('Scholl', 'Benkendorf')
                
            if(any(object@Instructor != instructors))stop("This Instructor is not valid")
            if(any(object@Wing %in% tech_letters))stop("This Wing is not valid")
            if(any(object@Days %notin% days)) stop("This Day is not valid")
  }
)
```

- Mandates the appropriate data type is entered
- Checks that the 'Wing' we enter exists in the Tech Building
- Ensures that a valid Instructor is entered
- Ensures that the appropriate abbreviation for a day is entered.
- Object clearly capable of performing procedures on itself. 

```{r Populate a more complex S4 object, message = F, warning = F, comment = ""}

s4_ob_office_hours <- office_hrs( 
  Instructor = c('Scholl', 'Benkendorf', 'Scholl', 'Benkendorf'),
  Wing = c('A', 'F', 'B', 'B'),
  Number = c(123, 412, 278, 138),
  Days = c("M", "W", 'T', 'F'),
  Time = c(8, 11, 9, 3),
  Smartroom = c(TRUE, F, T, F),
  Windows = c(FALSE, T, T, F)
)

otype(s4_ob_office_hours)
s3_class(s4_ob_office_hours)

rm(s4_ob_office_hours, office_hrs)
```

- Easy examples, but we could also script in conversion functions like with the ealier Units and POSIX S3 objects.
- S3/S4 objects can have a lot going on 'under the hood'
- At their heart, they are performing operations on themselves. 

You will realize in short time, that the biggest hurdle to dealing with spatial data in R is how complex some of the structures may be. But I guarantee you all have seen more of the intricate workings of these objects than the vast majority of folks which utilize them. Just remember, to appease the validity functions and you will be fine. 

```{rCreate an S4 object 3, message = F, echo = F, warning = F, comment = ""}
rm(s4_ob_office_hours, office_hrs, dec_lakes_r, dec_lakes_r_classified_f, empty_raster, example_raster_oct, oct_lakes_r_classified_f)
```

# Works Cited

Advanced R. Wickham, H.  https://adv-r.hadley.nz/index.html Accessed 01.09.2022

https://geocompr.robinlovelace.net/spatial-class.html Accessed 01.09.2022

Hijman, R. 05.12.2019 'The raster Package'

https://www.datamentor.io/r-programming/s3-class/ Accessed 01.18.2022

https://rspatial.org/raster/RasterPackage.pdf Accessed 01.09.2022

Pebesma, E.J., R.S. Bivand, 2005. Classes and methods for spatial data in R. R News 5 (2).

Pebesma, E. https://r-spatial.github.io/sf/articles/sf1.html Accessed 01.10.2022

https://cran.r-project.org/web/packages/vctrs/vignettes/s3-vector.html Accessed 01.14.2022

https://en.wikipedia.org/wiki/Object-oriented_programming Accessed 01.19.2022
